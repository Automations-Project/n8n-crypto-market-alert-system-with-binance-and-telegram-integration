{"name":"[n8n] Crypto Market Alert System with Binance and Telegram Integration","nodes":[{"parameters":{"rule":{"interval":[{"daysInterval":7}]}},"name":"Schedule Trigger","type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.1,"position":[1300,-180]},{"parameters":{"chatId":"-1002138086614","text":"={{ $json.data.replaceAll(/(Last Price: \\S+)$/gm,\"$1\\n\").slice(0,1000) }}","additionalFields":{}},"name":"Send Telegram Message","type":"n8n-nodes-base.telegram","typeVersion":1,"position":[2140,-180]},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"name":"Aggregate","type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[1800,-180],"notesInFlow":true,"notes":"Combine all items"},{"parameters":{"url":"https://api.binance.com/api/v1/ticker/24hr","options":{}},"name":"Binance 24h Price Change","type":"n8n-nodes-base.httpRequest","typeVersion":1,"position":[1460,-180],"notesInFlow":true,"notes":"Get data of changed price coins in last 24h"},{"parameters":{"functionCode":"// Iterate over all coins and check for 10% price change\nconst significantChanges = [];\nfor (const coin of items[0].json) {\n  const priceChangePercent = parseFloat(coin.priceChangePercent);\n  if (Math.abs(priceChangePercent) >= 15) {\n    significantChanges.push({ \n      symbol: coin.symbol, \n      priceChangePercent, \n      lastPrice: coin.lastPrice \n    });\n  }\n}\n\n// Sort the items by percent rate from high to low\nsignificantChanges.sort((a, b) => b.priceChangePercent - a.priceChangePercent);\n\n// Format the sorted data for output\nconst sortedOutput = significantChanges.map(change => ({\n  json: { message: `\\`\\`\\`${change.symbol} Price changed by ${change.priceChangePercent}% \\n Last Price: ${change.lastPrice}\\`\\`\\`` }\n}));\n\nreturn sortedOutput;\n"},"name":"Filter by 10% Change rate","type":"n8n-nodes-base.function","typeVersion":1,"position":[1640,-180],"notesInFlow":true,"notes":"Filter by 10% Up & Down"},{"parameters":{"jsCode":"// Function to split the data into chunks of approximately 1000 characters\nfunction splitDataIntoChunks(data) {\n    const chunks = [];\n    let currentChunk = \"\";\n\n    data.forEach(item => {\n        // Ensure that each item has a 'message' property\n        if (item && item.message) {\n            const message = item.message + \"\\n\"; // Adding a newline for separation\n            // Check if adding this message to the current chunk would exceed the 1000 characters limit\n            if (currentChunk.length + message.length > 1000) {\n                // If so, push the current chunk to the chunks array and start a new chunk\n                chunks.push({ json: { data: currentChunk } });\n                currentChunk = message;\n            } else {\n                // Otherwise, add the message to the current chunk\n                currentChunk += message;\n            }\n        }\n    });\n\n    // Add the last chunk if it's not empty\n    if (currentChunk) {\n        chunks.push({ json: { data: currentChunk } });\n    }\n\n    return chunks;\n}\n\n// The input data is passed from the previous node\nconst inputData = items[0].json.data; // Accessing the 'data' property\n\n// Process the data\nconst result = splitDataIntoChunks(inputData);\n\n// Output the result\nreturn result;\n"},"name":"Split By 1K chars","type":"n8n-nodes-base.code","typeVersion":2,"position":[1960,-180],"notesInFlow":true,"notes":"Split them for telegram message limit"},{"parameters":{"content":"### Workflow Setup Steps:\n1. Ensure the **_Schedule Trigger_** is active to desired cron time (Default 5 minutes).\n2. [_Optional_] Configure the **_Binance 24h Price Change_** node with your API details (Default one is Free Public API Call - Free).\n3. Set up your **Telegram bot** token in the **Telegram node credentials**.\n4. Update the **_Chat ID_** in the **_Send Telegram Message_** node.\n5. Test the workflow to ensure everything is set up correctly.\n* **Notes**: Detailed telegram bot setup instructions are available in the [workflow's n8n page](https://n8n.io/workflows/2043-crypto-market-alert-system-with-binance-and-telegram-integration).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ ‌ ‌ ‌ ‌‌ [![N8N Creator Profile - Nskha](https://cdn.statically.io/gh/Automations-Project/n8n-templates/main/stats.min.svg)](https://n8n.io/creators/nskha)","height":602.3985454284507,"width":1099.4727835994502,"color":5},"name":"Sticky Note","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1240,-380]}],"connections":{"Schedule Trigger":{"main":[[{"node":"Binance 24h Price Change","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"Split By 1K chars","type":"main","index":0}]]},"Binance 24h Price Change":{"main":[[{"node":"Filter by 10% Change rate","type":"main","index":0}]]},"Filter by 10% Change rate":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Split By 1K chars":{"main":[[{"node":"Send Telegram Message","type":"main","index":0}]]}},"active":"false","settings":{"executionOrder":"v1","timezone":"Asia/Baghdad","saveExecutionProgress":true,"saveManualExecutions":true,"callerPolicy":"workflowsFromSameOwner","executionTimeout":600,"errorWorkflow":""},"staticData":"","pinData":{},"meta":{"templateCredsSetupCompleted":false},"tags":[{"createdAt":"2024-04-09T20:07:39.808Z","updatedAt":"2024-04-09T20:07:39.808Z","id":"QmluYW5jZQ","name":"Binance"},{"createdAt":"2024-04-09T20:07:39.808Z","updatedAt":"2024-04-09T20:07:39.808Z","id":"U2NoZWR1bGVUcmlnZ2Vy","name":"ScheduleTrigger"},{"createdAt":"2024-04-09T20:07:39.808Z","updatedAt":"2024-04-09T20:07:39.808Z","id":"VGVsZWdyYW0","name":"Telegram"},{"createdAt":"2024-04-09T20:07:39.808Z","updatedAt":"2024-04-09T20:07:39.808Z","id":"VGVsZWdyYW1BcGk","name":"TelegramApi"},{"createdAt":"2024-04-09T20:07:39.808Z","updatedAt":"2024-04-09T20:07:39.808Z","id":"QWdncmVnYXRl","name":"Aggregate"},{"createdAt":"2024-04-09T20:07:39.808Z","updatedAt":"2024-04-09T20:07:39.808Z","id":"SHR0cFJlcXVlc3Q","name":"HttpRequest"},{"createdAt":"2024-04-09T20:07:39.808Z","updatedAt":"2024-04-09T20:07:39.808Z","id":"RnVuY3Rpb24","name":"Function"},{"createdAt":"2024-04-09T20:07:39.808Z","updatedAt":"2024-04-09T20:07:39.808Z","id":"Q29kZQ","name":"Code"},{"createdAt":"2024-04-09T20:07:39.808Z","updatedAt":"2024-04-09T20:07:39.808Z","id":"dGVtcGxhdGVz","name":"templates"}]}